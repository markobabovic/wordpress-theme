/*! Mixins/Utilities */

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

$base-font-size: 16px !default;
$rem-ratio: ($base-font-size / 1px) / 1rem;

$rem-with-px-fallback: true !default;

@mixin rem($property, $values) {
	$px-values: ();
	$rem-values: ();

	@if type-of($values) != 'list' {
		$values: join((), $values);
	}

	@each $value in $values {
		@if type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem) {
			@if unit($value) == px {
				$px-values: join($px-values, round($value));
				$rem-values: join($rem-values, $value / $base-font-size + rem);
			}
			@else {
				$px-values: join($px-values, round($value * $rem-ratio) + px);
				$rem-values: join($rem-values, $value);
			}
		}
		@else {
			$px-values: join($px-values, $value);
			$rem-values: join($rem-values, $value);
		}
	}

	@if $rem-with-px-fallback {
		#{$property}: $px-values;
	}

	#{$property}: $rem-values;
}

@mixin if-rem($property, $values) {
	@include rem($property, $values);
}

@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

@mixin align-items($align){
    -webkit-align-items: $align; /* Safari 7.0+ */
    align-items: $align;
}

@mixin img-cover($align){
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: $align;
}

@mixin appearance ($value: none) {
    -webkit-appearance:     $value;
    -moz-appearance:        $value;
    -ms-appearance:         $value;
    -o-appearance:          $value;
    appearance:             $value;
}

@mixin scale($value){
    -ms-transform: scale($value); /* IE 9 */
    -webkit-transform: scale($value); /* Safari */
    transform: scale($value);
}

@mixin horizontal-center(){
    transform: translateX(-50%);
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
}

@mixin vertical-center(){
    transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
}

@mixin rotate($value){
    -ms-transform: rotate($value); /* IE 9 */
    -webkit-transform: rotate($value); /* Safari */
    transform: rotate($value);
}

@mixin both-center(){
    transform: translate(-50%, -50%);
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
}
